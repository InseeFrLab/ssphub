on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed   # Including closed to remove preview when PR is closed. 
    branches:
      - main


# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    if: github.event.action != 'closed'  # If closing the PR, no publishing
    runs-on: ubuntu-latest
    # To cancel previous actions that could run on this PR
    concurrency:
      group: preview-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # To enable full access to Git repo
          ref: ${{ github.event.pull_request.head.ref }}  # Reference of the commit to checkout to. To ensure it's the one of the PR
          repository: ${{github.event.pull_request.head.repo.full_name}}  # Reference to the branch to checkout to. Useful with PR from forks
      
      # add software dependencies here and any libraries
      # See more at https://github.com/quarto-dev/quarto-actions/blob/main/examples/example-03-dependencies.md
      - name: Configure safe.directory  # Workaround for actions/checkout#760
        run: git config --global --add safe.directory /__w/ssphub/ssphub
      
      # Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13' # Version range or exact version of a Python version to use, using SemVer's version range syntax
      
      # Jupyter
      - run: pip install jupyter nbformat

      # Quarto
      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # To publish to GitHub Pages - 1 create directory
      - name: Create directory
        run: |
          PR_TITLE_WITH_SPACE="${{ github.event.pull_request.title }}"
          SANITIZED_TITLE=$(echo "$PR_TITLE_WITH_SPACE" | tr ' ' '_')
          PUBLISH_DIR=preview-${{ github.event.pull_request.number }}-$SANITIZED_TITLE
          echo "PUBLISH_DIR=$PUBLISH_DIR" >> $GITHUB_ENV
          mkdir -p ./$PUBLISH_DIR
          echo ./$PUBLISH_DIR
    
      # To publish to GitHub Pages - 2 render and publish
      - name: Publish to GitHub Pages (and render)
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
          path: ${{ env.PUBLISH_DIR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions

      - name: Install npm
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/setup-node@v2          
        with:
          node-version: '18'

      - name: Fetch comments  # To see if a comment has previously been posted
        id: fetch-comments
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find the comment with the body containing "‚úÖ Preview site is ready:"
            const previewSiteReadyComment = comments.find(comment => comment.body.includes('‚úÖ Preview site is ready:'));


            // Set the output
            if (previewSiteReadyComment) {
              core.setOutput('commentId', previewSiteReadyComment.id);
            } else {
              core.setOutput('commentId', '');
            }

      - name: Delete existing comment if exists
        if: steps.fetch-comments.outputs.commentId != ''
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fetch-comments.outputs.commentId }},
            });

      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.PUBLISH_DIR }}`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Preview site is ready: [${previewUrl}](${previewUrl})`
            })

            core.setOutput('previewUrl', previewUrl)

  deploy-preview:
    if: github.event.action != 'closed'  # Deploying if PR not closed 
    runs-on: ubuntu-latest
    needs: build  # Job build is done beforehand and creates previewUrl
    environment:
      name: github-pages
      url: needs.build.outputs.previewUrl
    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: ./${{ env.PUBLISH_DIR }}
  
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  delete-preview:
    if: github.event.action == 'closed'  # Only run when PR is closed
    runs-on: ubuntu-latest
    steps:
      - name: Remove preview from GitHub Pages
        uses: peaceiris/actions-gh-pages@v4.0.0  # https://github.com/marketplace/actions/github-pages-action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages  
          publish_dir: ./${{ env.PUBLISH_DIR }}
          keep_files: false
          force_orphan: true  # This allows you to make your publish branch with only the latest commit.
          enable_jekyll: false
          allow_empty_commit: true

      - name: Comment PR that preview was removed
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üóëÔ∏è Preview site has been removed.`
            })
