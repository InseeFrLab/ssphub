<!-----------------
Objets temporaires
------------------>

<details>

<summary>
Objets r√©actifs n√©cessaires pour modifier en continu l'input de la figure 1
</summary>

```{ojs}
message = {
  const class_to_use = (scrubber_participants < end_count - 100) ? "blurred-element" : "underline-big";

  const message_to_print = `
  En fin d'ann√©e, <span class = "${class_to_use}" >${end_count}</span> personnes √©taient membres de la liste de diffusion üöÄüöÄ.
  `

  return message_to_print
}
```

```{ojs}
numbers2 = {
  const startValue = start_count;
  const endValue = end_count;

  const numbers = Array.from({ length: endValue - startValue + 1 }, (_, i) => i + startValue);
  return numbers
}
```


```{ojs}
current_bar = {
  const startValue = 0;
  const endValue = scrubber_participants;

  const numbers = Array.from({ length: endValue - startValue + 1 }, (_, i) => i + startValue) ;
  return numbers

}
```


<!---------
scrubber
---------->

```{ojs}
//| echo: false
viewof scrubber_participants = Scrubber(numbers2, {loopDelay: 4000, initial: start_count})
```

</details>

<!------------ 
figure
------------->

<details>

<summary>
La premi√®re figure, anim√©e par la r√©activit√© de ses inputs
</summary>


```{ojs}
plot_bar_participants = Plot.plot({
  height: 40,
  marginLeft: 60,
  x: {label: "Frequency ‚Üí", domain: [336, 552]},
  y: {label: null},
  color: {
    scheme: "ylorrd",
    domain: [236, scrubber_participants] 
    },
  marks: [
    Plot.barX(current_bar, {x: 1, inset: 0.5, fill: (d) => d}),    //<1>
  ]
})
```
1. El√©ment r√©actif

</details>