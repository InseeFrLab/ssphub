---
title: "Onyxia: l'infrastructure cloud m√®re des dragons"
subtitle: Un projet autour d'une infrastructure de data science √† la pointe
toc: true
summary: |
  Les technologies cloud sont incontournables dans l'√©cosyst√®me de la 
  donn√©e. Pour ne pas se rendre d√©pendante de fournisseurs de services
  externes, l'Insee a d√©velopp√© un datalab avec des technologies
  √† la pointe pour ses data scientists. Le code source de celle-ci 
  a √©t√© ouvert dans le cadre du projet Onyxia. Ce projet permet
  de f√©d√©rer une large communaut√© d'utilisateurs mais aussi
  d'organisations int√©ress√©es par le d√©veloppement d'une
  plateforme souveraine de data science. 
# Link this post with a project
projects: [onyxia]

# Date published
date: '2023-01-10T00:00:00Z'

# Date updated
lastmod: '2023-01-10T00:00:00Z'

# Is this an unpublished draft?
draft: false

# Show this page in the Featured widget?
featured: true

# Featured image
# Place an image named `featured.jpg/png` in this page's folder and customize its options here.
#image:
#  focal_point: ''
#  placement: 2
#  preview_only: false

authors:
  - linogaliana

tags:
  - onyxia
  - sspcloud

categories:
  - Insee

bibliography: references.bib
---


`Onyxia` est un logiciel _open source_ d√©velopp√© par l‚ÄôInsee
([disponible sur `Github` <i class="fa-brands fa-github"></i>](https://github.com/InseeFrLab/onyxia-web))
permettant de fournir un environnement de traitement de donn√©es √† l‚Äô√©tat de l‚Äôart.
Principalement con√ßu pour permettre le travail interactif des data scientists,
l‚Äôexp√©rience fournie avec `Onyxia`
favorise √©galement la reproductibilit√© des travaux et leur mise en production.

Le logiciel `Onyxia` est install√© par des organisations souhaitant cr√©er un _datalab_,
c'est-√†-dire une plateforme interactive de traitement de donn√©es.
Ces organisations ont toutes le point commun de vouloir construire une plateforme qui embrasse
les technologies _cloud_ que sont la conteneurisation et le stockage objet tout en mettant √†
disposition celles-ci dans un environnement _user-friendly_ o√π l'interconnexion entre ces
diff√©rentes briques est g√©r√©e de mani√®re coh√©rente.
Les technologies _cloud native_ sont devenues indispensables dans l‚Äô√©cosyst√®me de la donn√©e,
du fait d'une meilleure gestion des ressources de traitement ou de la capacit√© √† cr√©er un
environnement parfaitement reproductible pour une mise en production acc√©l√©r√©e.

Ce _post_ de blog a pour objectif de pr√©senter la raison d'√™tre d'`Onyxia`,
sa g√©n√®se et les solutions qu'apporte cette infrastructure √† des irritants
classiques des projets novateurs de data science. 

## Contexte

L'√©cosyst√®me de la data science est en mouvement acc√©l√©r√© depuis 10 ans
et le r√¥le du _data scientist_ dans les organisations valorisant de la donn√©e
√©volue continuellement [@davenport2022data]. 
Les data scientists modernes sont amen√©s √† utiliser de plus en plus
de langages et doivent √™tre capables de ma√Ætriser plusieurs
architectures informatiques. La fronti√®re est ainsi moins nette
que par le pass√© entre
statisticiens et informaticiens. 
De plus, les innovations r√©centes dans le monde du
d√©veloppement logiciel, notamment 
l'adoption massive de l'approche `DevOps` -
approche qui consiste √† automatiser la production de livrables d√®s la conception
du prototype -
a √©galement fait √©voluer les pratiques des data scientists.

Ce besoin de ressources informatiques croissantes, 
de flexibilit√© dans le prototypage de solutions informatiques et l'√©volution des
pratiques
consistant √† mettre √† disposition en continu des livrables ont eu des implications
importantes sur les architectures informatiques dominantes dans l'√©cosyst√®me de la 
donn√©e.
Pour r√©pondre au besoin croissant de puissance de traitement, les serveurs
partag√©s, organis√©s sous forme de _clusters_, se sont d√©velopp√©s dans de 
nombreuses organisations.
Apr√®s avoir connue son heure de gloire au d√©but des ann√©es 2010, l'infrastructure
[`HDFS` (_Hadoop Distributed File System_)](https://openclassrooms.com/fr/courses/4467481-creez-votre-data-lake/4509426-decouvrez-le-systeme-de-fichiers-distribue-hdfs), 
qui reposait sur des _clusters_ o√π les donn√©es et la puissance de traitement √©taient
distribu√©es et collocalis√©es, a laiss√© place √† des infrastructures
plus _scalables_, bas√©es sur l'approche de la conteneurisation. 

## De HDFS √† la conteneurisation

{{% callout note %}}
Cette partie plus technique d√©veloppe des √©l√©ments pour comprendre
le succ√®s r√©cent des infrastructures conteneuris√©es. 

Elle pourra int√©resser le lecteur curieux sur les fondements
des infrastructures _cloud_ modernes mais n'est pas n√©cessaire
√† la compr√©hension g√©n√©rale de l'article.
{{% /callout %}}


La conteneurisation, qui repose
sur l'id√©e que les serveurs de stockage de la donn√©e peuvent √™tre dissoci√©s de ceux
effectuant les traitements, sert de fondement aux principales plateformes _cloud_ actuelles
fournissant 
des services √† la demande.
 
Ce nouveau paradigme part de deux constats. Le premier
est que les
√©changes de donn√©es entre les noeuds d'un serveur sont aujourd'hui peu co√ªteux.
Avec des flux r√©seaux suffisants et une technologie
performante, 
il est donc possible d'√©changer √† un co√ªt mod√©r√©
de gros volumes de donn√©es au sein d'une infrastructure.
Le deuxi√®me constat est que la maintenance d'une infrastructure conteneuris√©e,
faite pour √™tre tr√®s mall√©able, est
plus l√©g√®re que celle d'une infrastructure bas√©e sur des machines virtuelles ou sur
les infrastructrures calibr√©es pour l'analytique _big data_ comme `HDFS` reposant
sur la collocalisation des donn√©es et des traitements[^1].

[^1]: On peut ajouter que cette question n'est pas exclusivement technologique. 
M√™me s'il est volontairement pol√©mique,
l'article de [Jordan Tigani "Big Data is Dead"](https://motherduck.com/blog/big-data-is-dead/)
illustre bien le changement de paradigme du monde de la _tech_. 

 
Les donn√©es √©tant stock√©es sur des serveurs diff√©rents de ceux ex√©cutant les traitements,
l'acc√®s √† celles-ci se fait √† travers des API qui 
permettent de traiter le syst√®me de stockage distant comme un syst√®me de fichiers
classique. `Onyxia` a adopt√© une impl√©mentation _open source_ du syst√®me de stockage
[`S3`](https://fr.wikipedia.org/wiki/Amazon_S3) appel√©e [`MinIO`](https://min.io/).

En ce qui concerne le traitement des donn√©es, le fait
d'utiliser un syst√®me de conteneurs, c'est-√†-dire une configuration logicielle portable minimaliste
pr√™te √† l'emploi (par opposition aux machines virtuelles qui impliquent un syst√®me d'exploitation complet), 
offre une grande libert√© sur le choix des logiciels de traitement. De nombreuses technologies 
_open source_ devenues standards dans le monde de la _data science_ (`Jupyter`, `RStudio`, `ElasticSearch`...) 
existent d√©j√† sous cette forme et peuvent ainsi √™tre adopt√©es dans une telle infrastructure pour fournir
des services pr√™ts-√†-l'emploi pour les data scientists.
La mise en 
musique de toutes ces petites boites auto-suffisantes, notamment l'optimisation des ressources concurrentes
sur un serveur, est permise par la technologie d'orchestration [`Kubernetes`](https://kubernetes.io/fr/).

<br>

```{python}
#| output: asis
#| echo: false
with open('onyxia_logic.svg') as f:
    s = f.read()
print(s)
```
_Centralisation des ressources par `Onyxia`_

<br>

```{=markdown}
{{{< spoiler text="Plus de d√©tails pour comprendre le changement de paradigme vers la conteuneurisation üëá" >}}}


Les infrastructures _big data_ reposent sur le principe du _cluster_ (grappe) informatique.
Des serveurs sont connect√©s entre eux, ce qui forme de mani√®re imag√©e une grappe. 
Cette interconnexion de plusieurs serveurs entre eux peut se faire au niveau :

- du **stockage** : les donn√©es volumineuses ne sont pas stock√©es sur un seul serveur mais au contraire r√©parties ;
- du **traitement** : les calculs sont effectu√©s par blocs sur plusieurs serveurs et le r√©sultat
de ceux-ci est ensuite transmis √† un serveur ma√Ætre. 

Le syst√®me _Hadoop Distributed File System_ a √©t√© pens√© pour tirer parti
de l'algorithme de traitement
parall√©lis√© [`MapReduce`](https://fr.wikipedia.org/wiki/MapReduce) propos√© en 2004
par `Google`. Les fichiers
volumineux sont fractionn√©s et r√©partis sur plusieurs serveurs.

![](https://i0.wp.com/datascientest.com/wp-content/uploads/2021/04/illu_schema_mapreduce-04.png?w=1024&ssl=1)

_Fonctionnement d'une architecture `MapReduce` (source: [Datascientest](https://datascientest.com/mapreduce))_

La sp√©cificit√© de l'architecture `HDFS` est que non seulement le stockage est
distribu√© mais √©galement aussi la puissance de traitement associ√©e.  On parle √†
ce propos de __collocalisation__ : les traitements ont lieu sur les m√™mes serveurs
que ceux o√π sont stock√©s les donn√©es. Cela permet
de r√©duire les mouvements de donn√©es (_shuffle_ dans l'image ci-dessus) qui 
sont co√ªteux du point de vue de la performance.
Cette collocalisation a permis au 
syst√®me `HDFS` de devenir, au d√©but de la d√©cennie 2010,
le paradigme dominant. En
tirant parti de la parall√©lisation
permise par des langages tr√®s efficaces comme `Spark` tout en limitant les
√©changes r√©seaux pouvant faire perdre en performance, cette 
architecture a attir√© au-del√† de l'√©cosyst√®me du _big data_. 

Le syst√®me HDFS pr√©sente n√©anmoins certaines limites qui expliquent sa
perte de succ√®s avec l'√©mergence d'un nouveau paradigme plus flexible.

En premier lieu,
ce syst√®me n√©cessite beaucoup de ressources du fait de son _design_. Comme
les traitements sont lourds et partag√©s pour des usages concurrents, 
les noeuds constituant le _cluster_ peuvent subir des arr√™ts √† cause
de surcharge des ressources. 
Pour tenir
compte de la nature instable de cette infrastructure _big data_,
les fichiers 
sont dupliqu√©s. Ainsi, lors d'une erreur sur le
serveur g√©n√©rant un arr√™t du n≈ìud 
(par exemple √† cause de traitements trop gourmands),
 les traitements sur l'ensemble
des donn√©es sont s√©curis√©s √©vitant √©galement 
la perte partielle ou totale de ces derni√®res.

L'implication est que les donn√©es, 
d√©j√† volumineuses, sont dupliqu√©es plusieurs fois 
impliquant des architectures assez monumentales. Si la duplication
de la donn√©e n'est
pas en soi choquante afin d'√©viter la perte de donn√©es,
cela a un effet 
pervers dans un syst√®me de collocalisation. A chaque ajout de noeuds
pour le stockage de donn√©es, il est √©galement n√©cessaire d'ajouter 
des ressources pour les traiter. Il est donc compliqu√© de d√©corr√©ler 
l'ajout de ressources de stockage et de traitement. Cette absence
de flexibilit√© est p√©nalisante dans un monde o√π les donn√©es sont mises
√† jour fr√©quemment et o√π les technologies de traitement, 
donc les besoins associ√©s, √©voluent rapidement. Les infrastructures `HDFS`
sont donc lourdes √† faire √©voluer, que ce soit pour ajouter des ressources
ou faire √©voluer les distributions logicielles pr√©sentes dessus.

Le deuxi√®me facteur qui a favoris√© le changement de paradigme est l'am√©lioration
des √©changes r√©seaux. Il n'est plus aussi co√ªteux que par le pass√© de transf√©rer
des volumes importants de donn√©es au sein d'une infrastructure. Cela facilite
la d√©corr√©lation entre environnement de stockage et de traitement.

Cette s√©paration
des environnements de stockage et de traitement 
permet alors d'adopter pour chacun les technologies
les plus performantes. Dans le domaine du stockage, celle qui 
a rencontr√© le plus de succ√®s est
le syst√®me de stockage [`S3`](https://aws.amazon.com/fr/s3/) d√©velopp√©
par Amazon. L'impl√©mentation _open source_ du syst√®me S3
est [`MinIO`](https://min.io/), utilis√©e
par `Onyxia`.

Dans le domaine du traitement, la technologie la plus performante
d√©pend de la nature de la t√¢che r√©alis√©e.
Selon qu'on d√©sire effectuer de la recherche
textuelle, des visualisations de donn√©es
ou de l'analyse d'image, on ne va pas vouloir utiliser
la m√™me technologie. Pour mettre √† disposition des logiciels
sur un serveur, il existe principalement deux approches concurrentes.

La premi√®re repose sur le principe des machines virtuelles. 
Cette approche n'est pas nouvelle et de nombreuses organisations ont
propos√© ou proposent encore ce type d'infrastructures pour des serveurs
collectifs de traitement. Cette approche est n√©anmoins lourde : elle n√©cessite
un syst√®me d'exploitation complet dont il faudra ensuite adapter la configuration lors de
l'installation de chaque logiciel. Plusieurs logiciels coexistent
donc dans ce syst√®me
d'exploitation m√™me si un seul, par exemple, `Python`, est utilis√©. 
Les machines virtuelles sont des infrastructures assez polluantes puisque pour
faire fonctionner un syst√®me d'exploitation dans son ensemble, il
est n√©cessaire de mobiliser des ressources plus importantes que celles seulement
n√©cessaires aux traitements. 
De plus, la configuration d'un syst√®me d'exploitation, et notamment, la gestion
de la d√©pendance de multiples logiciels √† des configurations syst√®mes qui
peuvent ne pas correspondre, n'est pas triviale. Il est donc lourd de faire
√©voluer une infrastructure reposant sur des machines virtuelles. 
L'absence de flexibilit√© d'une infrastructure reposant
sur le principe des machines virtuelles est p√©nalisante
dans un
√©cosyst√®me mouvant comme celui de la _data science_, o√π une partie importante
du travail de prototypage consiste √† tester plusieurs technologies 
pour d√©terminer celle s'int√©grant le mieux dans un processus de traitement
de donn√©es. 

Le syst√®me de la conteneurisation a justement √©t√© pens√©
pour cela : plut√¥t qu'installer de nombreuses librairies au niveau du syst√®me, pour une fraction 
d'utilisateurs limit√©e √† chacune,
il est plus int√©ressant de cr√©er des environnements complets
qui vont exister de mani√®re conjointe. Chaque _framework_ va √™tre construit comme
un conteneur autosuffisant avec un syst√®me d'exploitation minime et un nombre
minimal de couches de configurations suppl√©mentaires. Un _framework_ est livr√©
sous la forme d'une
image [`Docker`](https://fr.wikipedia.org/wiki/Docker_(logiciel)), une technologie
qui permet d'empaqueter un logiciel et ses d√©pendances sous la forme de boites
minimalistes et les mettre √† disposition facilement pour une r√©utilisation. 
Il existe par exemple des images `Docker` pour pouvoir utiliser `RStudio`, `Jupyter`,
`VSCode`
avec des configurations minimales afin d'ex√©cuter du `Python` ou du `R`. A partir de
celles-ci, l'utilisateur qui d√©sire des configurations suppl√©mentaires
peut ajouter les couches qui lui sont utiles. 

Mais les images `Docker` ne se r√©duisent pas √† la mise √† disposition
d'environnements de d√©veloppement.
Une partie des technologies les plus appr√©ci√©es de l'√©cosyst√®me de la
data science sont √©galement livr√©es sous forme d'images `Docker`. Par
exemple, le moteur de recherche `ElasticSearch`, tr√®s utilis√© pour
la recherche textuelle, peut √™tre empaquet√© dans une
image `Docker`. Le logiciel `Onyxia` propose d√®s lors, dans un catalogue vivant,
un certain nombre
de logiciels tr√®s utiles pour les _data scientists_ ayant fait l'objet d'un 
tel empaquetage. 
Les nombreuses images `Docker` servant √† cr√©er des services 
pour les _data scientists_ sont disponibles en _open source_ 
sur [`Github`](https://github.com/InseeFrLab/images-datascience).

Pour organiser sur un serveur la coexistence 
de multiples utilisateurs de services gourmands en ressource, 
la solution [`Kubernetes`](https://kubernetes.io/fr/) fait
aujourd'hui office de 
r√©f√©rence.
Entre sa cr√©ation en 2014 et aujourd'hui, cette solution
d'orchestration, c'est-√†-dire de gestion d'une infrastructure,
est devenue incontournable. Outre son allocation dynamique
des ressources, elle permet de transformer facilement
le livrable d'une chaine de traitement
en application disponible en continu. Ceci est
particuli√®rement adapt√© dans un contexte de
diversification
des livrables fournis par les _data scientists_ (API, application web, mod√®le...)
et d'adoption d'une d√©marche `DevOps` voire `MLOps`.

{{{< /spoiler >}}}
```

## La solution Onyxia

### D'un _cloud_ de l'administration √† un logiciel ouvert

Pour permettre aux *data scientists* des administrations fran√ßaises
de b√©n√©ficier de technologies _cloud_ sans √™tre d√©pendant d'un
fournisseur de service priv√©,
l'√©quipe innovation de l'Insee a eu l'id√©e de cr√©er un
_datalab_ bas√© sur la philosophie de la conteneurisation en 
mobilisant exclusivement des composants open-source. 

Ce _datalab_, n√© √† l'Insee en 2018, a √©t√© ouvert √† l'administration
publique sous la forme d'une instance https://www.sspcloud.fr/
√† condition d'utiliser des donn√©es ouvertes. 
En plus des agents d√©j√† en poste dans l'administration,
cette infrastructure sert depuis deux ans √† former les √©l√®ves de l'ENSAE et
de l'ENSAI
dans le cadre de leur formation en _data science_. 

D√©but 2023, ce sont plus de 3000 agents et √©tudiants qui sont inscrits 
sur cette infrastructure avec, en moyenne, 300 utilisateurs
hebdomadaires. L'infrastructure de traitement propose 10 TB de RAM,
1100 CPU disponibles et 34 GPU. La capacit√© de stockage associ√©e 
est de 150 TB. 

Pour les utilisations internes de donn√©es plus sensibles,
l'√©quipe innovation
de l'Insee a rendu disponible
le code source derri√®re le `SSP Cloud`
dans le cadre d'un logiciel
nomm√© `Onyxia` (https://www.onyxia.sh/).
Ce logiciel est pens√© comme un kit qui peut √™tre install√©
sur un _cluster_ `Kubernetes`, technologie d√©taill√©e
pr√©c√©demment. 

## Onyxia en bref

<img src = "onyxia_ecailles.svg" alt="Composantes Onyxia"/>

`Onyxia` propose principalement deux composants de valeur :

* une __interface web__ qui agit comme la porte d‚Äôentr√©e du *data scientist* sur son datalab, lui facilitant l‚Äôacc√®s aux technologies cloud et lui permettant de d√©marrer ses environnements de traitement de la donn√©e. L'interface ergonomique permet aux utilisateurs de donn√©es n√©ophytes de d√©marrer des services standardis√©s sans se pr√©occuper de la configuration mais aussi aux *data scientists* plus aguerris de b√©n√©ficier de vastes possibilit√©s de personnalisation du service. 
* des __catalogues de logiciels__ : une petite vingtaine de services interactifs dont les plus utilis√©s sont `RStudio`, `Jupyter`, `VScode`, une quinzaine de services sp√©cialis√©s dans les bases de donn√©es (`Postgres`, `ElasticSearch`...),  5 services d‚Äôautomatisation (`MLflow`, `Label Studio`) et 2 services de _dataviz_ (`Redash` et `Superset`)

<img src = "catalogue.svg" alt="Le catalogue Onyxia"/>

_Le catalogue des services disponibles dans `Onyxia`._

<br>

Ces deux composants peuvent √™tre adapt√©s en fonction des besoins internes de chaque organisation.
Tous les services interactifs sont automatiquement connect√©s √† l'espace de stockage `S3`,
et au coffre de secret `Vault`. La gestion des droits d'acc√®s aux donn√©es stock√©es dans l'espace
de stockage `S3` ou dans des services de bases de donn√©es (`ElasticSearch`, `PostGreSQL`...)
est automatis√©e afin que chaque service
puisse acc√©der aux donn√©es sur lesquelles l'utilisateur
d√©tient des droits. 

`Onyxia` √©tant un ensemble mall√©able de logiciels conteuneuris√©s,
il est possible de ne pas adopter l'ensemble des services propos√©s par l'√©quipe de l'Insee qui maintient
`Onyxia`. Il est √©galement possible de changer certaines des briques
de base pour l'adapter √† des √©l√©ments d'infrastructure interne. Par exemple, il est possible d'adapter
la destination du service de stockage ou les configurations des environnements data science pour adapter
√† des ressources. 

## L'interface et les services propos√©s par `Onyxia`

<img src = "multiple_instances.svg" alt="Onyxia, un ensemble d'instanciations possibles"/>

_Onyxia offre des marges de manoeuvre sur l'interface_

L'une des principales forces d'`Onyxia` est d'offrir une multiplicit√© de services diff√©rents
avec une interconnexion entre eux g√©r√©e de mani√®re coh√©rente. 

Les conteneurs sont d√©marr√©s comme des services √† la demande et la configuration automatique
de ceux-ci permet d'assurer aux data scientists l'acc√®s aux donn√©es disponibles dans
des espaces de stockage ou des bases de donn√©es cr√©√©es par l'utilisateur.

Le catalogue de services se pr√©sente par le biais d'un formulaire ergonomique o√π l'utilisateur
choisit la brique qu'il d√©sire utiliser:

![](onyxia_ui1.png)

Les data scientists
et statisticiens n'ont donc pas besoin de conna√Ætre les d√©tails du fonctionnement des briques
techniques d'`Onyxia` pour utiliser la plateforme. Les
√©l√©ments techniques comme la connexion au syst√®me de stockage sont
par d√©faut d√©ja configur√©s:

![](onyxia_ui2.png)

L'interface ergonomique
permet de param√©trer certaines configurations si besoin, notamment 
les ressources √† disposition du conteneur. N√©anmoins l'allocation
dynamique des ressources offre d√©j√† de la flexibilit√© :

![](onyxia_ui3.png)

L'utilisateur a acc√®s √† l'ensemble des services qu'il a ouvert
depuis une page d√©di√©e:

![](onyxia_ui4.png)

Les services interactifs comme `Jupyter`, `VSCode` ou `RStudio` permettent
alors √† l'utilisateur d'acc√©der √† une interface pour ex√©cuter des 
traitements `Python` ou `R`. 

![](onyxia_ui5.png)

L'acc√®s aux donn√©es peut se faire depuis la ligne de
commande (via un utilitaire [Minio Client](https://min.io/docs/minio/linux/reference/minio-mc.html))
ou par un package `Python` ou `R` d√©di√© qui permet de traiter
le syst√®me de stockage distant comme un syst√®me local. Les
traitements sont ex√©cut√©s sur les serveurs de la plateforme qui 
h√©berge les notebooks, ind√©pendamment de la machine par laquelle
l'utilisateur acc√®de au service. Par exemple, dans le cas du `SSPCloud`,
les traitements sont ex√©cut√©s depuis des serveurs h√©berg√©s √† l'Insee. 

## La communaut√© `Onyxia`

Tous les composants sont propos√©s en _open source_ par l‚ÄôInsee ce qui permet de f√©d√©rer une communaut√©
d'utilisateurs et de d√©veloppeurs de ce produit. 
Il s'agit d'un bel exemple de mutualisation au sein de l‚Äô√âtat et au del√†.
Les d√©p√¥ts peuvent √™tre retrouv√©s sur
le `Github` de l'√©quipe innovation (celui de [l'interface web](https://github.com/InseeFrLab/onyxia-web),
celui des [images pour la data-science](https://github.com/InseeFrLab/images-datascience)...).
La communaut√© peut proposer de nouveaux services dans le catalogue.

Cette approche _bottom up_ a d√©j√† permis 
d'adapter des services aux besoins des utilisateurs ou d'am√©liorer la solution gr√¢ce √† des retours
des r√©-utilisateurs d'`Onyxia`. 

<!-----
<iframe width="100%" height="500px" marginheight="0" marginwidth="0" src="./template/index.html">
Fallback text here for unsupporting browsers, of which there are scant few.
</iframe>
----->

## Les plateformes bas√©es sur Onyxia

La plateforme d'origine, le `SSPCloud`,
est ouverte √† tous les agents de l‚Äô√âtat et √† plusieurs √©coles.
Celle-ci est exclusivement limit√©e √† l‚Äôexploitation de donn√©es _open data_.
Cette strat√©gie d‚Äôoffreur de services de traitement sur l‚Äôopen data permet de montrer
l‚Äôexpertise de l‚ÄôInsee sur les sujets _data science_.

Les principaux usages de cette plateforme sont les suivants :

* la formation ;
* l‚Äôorganisation de hackathons ;
* la mise √† disposition de services innovants et visualisations utilisant de l'open data ;

Gr√¢ce √† la mise √† disposition de la solution `Onyxia` sur `Github`,
il est n√©anmoins possible d'adapter cette plateforme pour des _datalab_ internes, sur donn√©es plus sensibles.

L‚ÄôInsee n‚Äôest donc d√©sormais plus seul et f√©d√®re de nombreux acteurs autour de son projet.
Fin 2021, `Eurostat` a √©t√© la premi√®re organisation en dehors
de l‚ÄôInsee √† choisir `Onyxia` pour construire son [_Cloud Agnostic Data Lab_](https://github.com/eurostat/datalab).
Expertise France pour le projet `DATAFID` a fait le choix d‚ÄôOnyxia tout comme le CASD,
le GENES ou encore le _BercyHub_ avec le projet `Nubonyxia`.

D‚Äôautres organisations sont plus dans une phase de POC ou d‚Äô√©tude : l‚ÄôINS norv√©gien, Pole Emploi, Data4Good,
le minist√®re de l‚ÄôInt√©rieur, le minist√®re de la Justice, l‚ÄôInria...

Dans le cadre du [TOSIT](https://tosit.fr/), association qui r√©unit de gros acteurs publics et priv√©s autour de solutions
_open source_, un certain nombre d'entreprises s'int√©ressent √† `Onyxia`. 


## R√©f√©rences

Vid√©o de pr√©sentation d'`Onyxia`:

{{< youtube zwKiO6LcIWE >}}
